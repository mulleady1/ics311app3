File:   reference.txt
Author: Kyle Mulleady

Algorithms and Complexity
-------------------------
The following is my analysis for the four metrics of Project 3.

    Reciprocity
    -----------
    This was the simplest algorithm.  It runs in Θ(E) time, because it simply iterates
    over all arcs in the graph.  In each iteration, the algorithm makes a constant-time
    check to see if the arc's reciprocal exists.

    Degree Correlation
    ------------------
    This is another algorithm that offers basic analysis.  It runs in Θ(E) time.  It iterates 
    over all arcs in the graph, computing the summation of the terms deg(u) * deg(v) for all 
    arcs (u, v) in the graph.  Also, during the iteration, it computes the values for s1, 
    s2, and s3 for all unvisited vertices u and v.
    
    This was an improvement to my original algorithm.  I first wrote it in Θ(V + E) time,
    iterating over all arcs and then iterating over all vertices.  I realized that could be
    improved, since iterating over all arcs offers access to all vertices.  Adding a 'visited'
    annotation to the vertices that have been processed during the iteration allows for doing 
    the work on the vertices as the arcs are being iterated over.

    Clustering Coefficient
    ----------------------
    This is a time consuming algorithm.  My implementation runs in O(V^2 lg V) time.  I have a
    while loop that iterates over all vertices.  Within the while loop, while processing the 
    current vertex v, I have nested for loops that check all possible pairs of vertices in v's
    adjacency list.  If we're dealing with a complete graph, the algorithm runs in Θ(V^2 lg V).
    In the general case V^2 lg V is the upper bound.

    Mean Geodesic Distance and Graph Diameter
    -----------------------------------------
    These two metrics are computed in one algorithm that runs in Θ(V lg V * (V + E)) time.  The
    V lg V comes from the algorithm's nested for loops that process all possible vertices in the 
    graph.  Inside the nested loops, BFS is executed, which runs in O(V + E) time.
